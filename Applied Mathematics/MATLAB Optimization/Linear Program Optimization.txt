MATLAB solutions for max/min optimization:

xsol = linprog(f,Ain,bin,Aeq,beq,lb,ub,x0,options)
[xsol, fval, exitflag] = linprog(f,Ain,bin,Aeq,beq,lb,ub,x0,options)
[xsol, fval, exitflag, output, lambda] = linprog(f,Ain,bin,Aeq,beq,lb,ub,x0,options)

notation:

[] = empty matrix notation

input arguments:

f = objective function coefficient vector for minimization 
*NOTE: for maximization multiply coefficients in f by -1
Ain = matrix coefficients for left side of inequality constraints
bin = vector coefficients for right side of inequality constraints
Aeq = matrix coefficients for left side of equality constraints
beq = vector coefficients for right side of equality constraints
lb = vector coefficients for lower bound of objective variables
ub = vector coefficients for upper bound of objective variables
x0 = start vector for algorithm, if known, otherwise []

output arguments:

x = optimal solution (vector)
fval = optimal value of the objective function (scalar)
*NOTE: for maximization multiply fval by -1 for correct value
exitflag = tells whether the algorithm converged or not, exitflag > 0 means convergence
output = a struct for iterations, algorithms used and PCG iterations (when LargeScale = on)
lambda = a struct containing Lagrange multipliers corresponding to the constraints

option argument:
 		   Display: []
               MaxFunEvals: []
                   MaxIter: []
                    TolFun: []
                      TolX: []
               FunValCheck: []
                 OutputFcn: []
                  PlotFcns: []
           ActiveConstrTol: []
                 Algorithm: []
    AlwaysHonorConstraints: []
           DerivativeCheck: []
               Diagnostics: []
             DiffMaxChange: []
             DiffMinChange: []
            FinDiffRelStep: []
               FinDiffType: []
         GoalsExactAchieve: []
                GradConstr: []
                   GradObj: []
                   HessFcn: []
                   Hessian: []
                  HessMult: []
               HessPattern: []
                HessUpdate: []
           InitialHessType: []
         InitialHessMatrix: []
          InitBarrierParam: []
     InitTrustRegionRadius: []
                  Jacobian: []
                 JacobMult: []
              JacobPattern: []
                LargeScale: []
                  MaxNodes: []
                MaxPCGIter: []
             MaxProjCGIter: []
                MaxSQPIter: []
                   MaxTime: []
             MeritFunction: []
                 MinAbsMax: []
        NoStopIfFlatInfeas: []
            ObjectiveLimit: []
      PhaseOneTotalScaling: []
            Preconditioner: []
          PrecondBandWidth: []
            RelLineSrchBnd: []
    RelLineSrchBndDuration: []
              ScaleProblem: []
                   Simplex: []
       SubproblemAlgorithm: []
                    TolCon: []
                 TolConSQP: []
                TolGradCon: []
                    TolPCG: []
                 TolProjCG: []
              TolProjCGAbs: []
                  TypicalX: []
               UseParallel: []

Format --

f^T*x -> min
s.t.
Ain*x <= bin
Aeq*x = beq
lb <= x <= ub

Example 1 --

2x1 + 2x2 -> max
s.t.
x1 + 2x2 <= 8
2x1 + x2 <= 10
x2 <= 3
x1, x2 >= 0

f = [-2 -3]';
Ain = [1 2; 2 1; 0 1];
bin = [8 10 3]';

[xsol fval] = linprog(f, Ain, bin);

xsol = 

    4.0000
    2.0000

fval = 

  -14.0000

*NOTE: this is a maximization problem therefore fval*-1 is the correct value. Linprog computes the
minimization of the linear program.

Example 2 --

300x1 + 260x2 + 220x3 + 180x4 - (8ys + 6yu) -> max
s.t.
11x1 + 7x2 + 6x3 + 5x4 <= 700
4x1 + 6x2 + 5x3 + 4x4 <= 500
8x1 + 5x2 + 5x3 + 6x4 <= ys
7x1 + 8x2 + 7x3 +4x4 <= yu
ys <= 600
yu <= 650
x1, x2, x3, x4, ys, yu >=0

f = [-300 -260 -220 -180 8 6]' <- notice all objective function coefficients are *-1 for maximization

Ain = [11 7 6 5 0 0; 4 6 5 4 0 0; 8 5 5 6 -1 0; 7 8 7 4 0 -1; 0 0 0 0 1 0; 0 0 0 0 0 1];
bin = [700 500 0 0 600 650]';
lb = [0 0 0 0 0 0]';

[xsol fval exitflag] = linprog(f, Ain, bin, [], [], lb, [], [])

xsol =

   16.6667
   50.0000
    0.0000
   33.3333
  583.3333
  650.0000


fval =

  -1.5433e+04


exitflag =

     1